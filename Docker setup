Step 1: Complete Code Files

1.1 pom.xml

xml


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>selenium-cucumber</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- Selenium -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>4.18.1</version>
        </dependency>
        <!-- Cucumber -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>7.15.0</version>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-testng</artifactId>
            <version>7.15.0</version>
        </dependency>
        <!-- TestNG -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>7.10.1</version>
        </dependency>
        <!-- Testcontainers -->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <version>1.19.7</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>selenium</artifactId>
            <version>1.19.7</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.5</version>
                <configuration>
                    <parallel>methods</parallel>
                    <threadCount>2</threadCount>
                    <suiteXmlFiles>
                        <suiteXmlFile>testng.xml</suiteXmlFile>
                    </suiteXmlFiles>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>



1.2 docker-compose.yml

yaml


version: '3'
services:
  hub:
    image: selenium/hub:latest
    ports:
      - "4444:4444"
    environment:
      - GRID_MAX_SESSION=10
  chrome1:
    image: selenium/node-chrome:latest
    depends_on:
      - hub
    environment:
      - SE_EVENT_BUS_HOST=hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=1
      - SE_NODE_OVERRIDE_MAX_SESSIONS=true
    links:
      - hub
  chrome2:
    image: selenium/node-chrome:latest
    depends_on:
      - hub
    environment:
      - SE_EVENT_BUS_HOST=hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=1
      - SE_NODE_OVERRIDE_MAX_SESSIONS=true
    links:
      - hub



1.3 Jenkinsfile

groovy


pipeline {
    agent {
        label 'linux-agent' // Matches the label for dynamically spun-up Linux agents
    }
    stages {
        stage('Checkout') {
            steps {
                git url: '<your-git-repo-url>', branch: 'main'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Run Tests') {
            steps {
                sh 'mvn test'
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'target/cucumber-reports.html', allowEmptyArchive: true
            sh 'docker-compose down || true' // Ensure cleanup even if Testcontainers fails
        }
        success {
            echo 'Tests passed successfully!'
        }
        failure {
            echo 'Tests failed. Check logs.'
        }
    }
}



Replace <your-git-repo-url> with your actual repository URL (e.g., https://github.com/username/repo.git).


1.4 src/test/java/utils/DriverFactory.java

java


package utils;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

import java.net.MalformedURLException;
import java.net.URL;

public class DriverFactory {
    private static final ThreadLocal<WebDriver> driver = new ThreadLocal<>();
    private static URL gridUrl;

    public static void setGridUrl(URL url) {
        gridUrl = url;
    }

    public static WebDriver getDriver() {
        if (driver.get() == null) {
            DesiredCapabilities caps = new DesiredCapabilities();
            caps.setBrowserName("chrome");

            try {
                driver.set(new RemoteWebDriver(gridUrl != null ? gridUrl : new URL("http://localhost:4444/wd/hub"), caps));
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
        return driver.get();
    }

    public static void quitDriver() {
        if (driver.get() != null) {
            driver.get().quit();
            driver.remove();
        }
    }
}



1.5 src/test/java/setup/DockerSetup.java

java


package setup;

import org.testcontainers.containers.DockerComposeContainer;
import org.testcontainers.containers.wait.strategy.Wait;
import utils.DriverFactory;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;

public class DockerSetup {
    private static DockerComposeContainer<?> composeContainer;

    public static void startDockerCompose() {
        if (composeContainer == null) {
            composeContainer = new DockerComposeContainer<>(new File("docker-compose.yml"))
                .withExposedService("hub_1", 4444, Wait.forHttp("/wd/hub/status").forStatusCode(200))
                .withLocalCompose(true);

            composeContainer.start();

            String hubHost = composeContainer.getServiceHost("hub_1", 4444);
            Integer hubPort = composeContainer.getServicePort("hub_1", 4444);
            try {
                DriverFactory.setGridUrl(new URL("http://" + hubHost + ":" + hubPort + "/wd/hub"));
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
    }

    public static void stopDockerCompose() {
        if (composeContainer != null) {
            composeContainer.stop();
        }
    }
}



1.6 src/test/java/steps/SearchSteps.java

java


package steps;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import utils.DriverFactory;

public class SearchSteps {
    private WebDriver driver;

    @Before
    public void setUp() {
        driver = DriverFactory.getDriver();
    }

    @Given("I am on the Google homepage")
    public void i_am_on_the_google_homepage() {
        driver.get("https://www.google.com");
    }

    @Given("I am on the Bing homepage")
    public void i_am_on_the_bing_homepage() {
        driver.get("https://www.bing.com");
    }

    @When("I search for {string}")
    public void i_search_for(String query) {
        driver.findElement(By.name("q")).sendKeys(query);
        driver.findElement(By.name("q")).submit();
    }

    @Then("I should see the search results")
    public void i_should_see_the_search_results() {
        System.out.println("Title: " + driver.getTitle() + " | Thread: " + Thread.currentThread().getId());
    }

    @After
    public void tearDown() {
        DriverFactory.quitDriver();
    }
}



1.7 src/test/java/runners/TestRunner.java

java


package runners;

import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.cucumber.testng.CucumberOptions;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeSuite;
import setup.DockerSetup;

@CucumberOptions(
    features = "src/test/resources/features",
    glue = {"steps"},
    plugin = {"pretty", "html:target/cucumber-reports.html"}
)
public class TestRunner extends AbstractTestNGCucumberTests {
    @BeforeSuite
    public void setUp() {
        DockerSetup.startDockerCompose();
    }

    @AfterSuite
    public void tearDown() {
        DockerSetup.stopDockerCompose();
    }
}



1.8 src/test/resources/features/GoogleSearch.feature

gherkin


Feature: Google Search
  Scenario: Search for Selenium
    Given I am on the Google homepage
    When I search for "Selenium"
    Then I should see the search results



1.9 src/test/resources/features/BingSearch.feature

gherkin


Feature: Bing Search
  Scenario: Search for Cucumber
    Given I am on the Bing homepage
    When I search for "Cucumber"
    Then I should see the search results



1.10 testng.xml

xml


<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="CucumberSuite" parallel="tests" thread-count="2">
    <test name="ChromeTest1">
        <classes>
            <class name="runners.TestRunner"/>
        </classes>
    </test>
    <test name="ChromeTest2">
        <classes>
            <class name="runners.TestRunner"/>
        </classes>
    </test>
</suite>



Step 2: Jenkins Setup on Linux

2.1 Install Jenkins (Ubuntu Example)

bash


sudo apt update
sudo apt install openjdk-11-jdk -y
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt update
sudo apt install jenkins -y
sudo systemctl start jenkins
sudo systemctl enable jenkins



Access at http://<jenkins-server-ip>:8080.

2.2 Install Plugins

Go to Manage Jenkins > Manage Plugins.



Install: Git, Pipeline, Docker Pipeline, Amazon EC2, Maven Integration.


2.3 Configure EC2 Cloud

Manage Jenkins > Manage Nodes and Clouds > Configure Clouds > Add a new cloud > Amazon EC2.



Settings:

Name: aws-linux-cloud



AMI: Ubuntu 20.04 (e.g., ami-0c55b159cbfafe1f0 in us-east-1).



Instance Type: t2.medium.



Key Pair: Your AWS SSH key.



Labels: linux-agent.



Init Script:

bash


#!/bin/bash
sudo apt update
sudo apt install -y openjdk-17-jdk maven docker.io
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -aG docker ubuntu
sudo chmod 666 /var/run/docker.sock
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose


Step 3: Push to Git Repository

Initialize Git:

bash


git init
git add .
git commit -m "Initial commit with Jenkins integration"


Push to remote:

bash


git remote add origin <your-git-repo-url>
git push -u origin main


Step 4: Configure Jenkins Pipeline

New Item > Pipeline.



Name: Selenium-Cucumber-Pipeline.



Pipeline:

Definition: Pipeline script from SCM.



SCM: Git.



Repository URL: <your-git-repo-url>.



Branch: main.



Script Path: Jenkinsfile.


Save and click Build Now.


Execution Flow

Jenkins spins up an EC2 Linux agent with label linux-agent.



The agent installs Java, Maven, Docker, and Docker Compose via the init script.



The Jenkinsfile:

Clones the repository.



Builds the project (mvn clean install).



Runs tests (mvn test), where:

DockerSetup starts Docker Compose.



Tests execute in parallel on two Chrome Nodes.



DockerSetup stops Docker Compose.


Artifacts (cucumber-reports.html) are archived.



The agent terminates after the job.


Troubleshooting

Docker Permission Issues: Ensure /var/run/docker.sock is accessible (chmod 666).



Port 4444 Conflict: Check with netstat -tuln | grep 4444 and free it if needed.



Testcontainers Failure: Verify Docker is running on the agent (docker info).


This is the complete, working setup with Jenkins integration on a Linux system with dynamic agent spinning. Replace placeholders (e.g., <your-git-repo-url>) with your actual values, and let me know if you need further assistance!


explain Testcontainers usage



Jenkins pipeline alternatives



more detailed comments


